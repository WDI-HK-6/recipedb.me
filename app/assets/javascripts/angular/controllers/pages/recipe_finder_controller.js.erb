app.controller('RecipeFinderCtrl', ['$scope', '$http', '$routeParams', 'TagServices', 'UserServices', '$location', '$timeout', function($scope, $http, $routeParams, TagServices, UserServices, $location, $timeout){

  // UserServices.getCurrentUser().then(function(data) {
  //     console.log('data',data);
  //     $scope.user = data;
  //   }, function(error){
  //     console.log('error',error);
  //   });

  // search_parameters
  $scope.search_parameters = {};
  $scope.search_parameters.categories = [];
  $scope.search_parameters.ingredients = [];
  $scope.search_parameters.keywords = [];
  $scope.search_parameters.timeframe = [0,1440];
  $scope.search_parameters.page = 1;
  $scope.search_parameters.user = false;
  $scope.recipes = [];

  // data to populate recipe finder
  $scope.meals = TagServices.meals
  $scope.cuisines = TagServices.cuisines
  $scope.cuisine_hidden = TagServices.cuisine_hidden
  $scope.courses = TagServices.courses
  $scope.courses_hidden = TagServices.courses_hidden
  $scope.occasions = TagServices.occasions
  $scope.occasions_hidden = TagServices.occasions_hidden

  // paginate varibales
  $scope.maxSize = 5;
  $scope.bigTotalItems = 1;
  $scope.bigCurrentPage = 1;
  $scope.chefLoadingImg = "<%= asset_path('chef-loading.gif') %>"
  $scope.defaultImg = "<%= asset_path('recipedb-default-img.png') %>"

  var getFilteredRecipes = function(params){
    $scope.loading = true;
    $http.post('/recipes/search', params).success(function(data, status){
      $scope.recipes = data.recipes;
      UserServices[$scope.pageLocation].recipes = data.recipes;
      $scope.loading = false;
      console.log('data received from the search:', data);
      if ($(".hide-finder-button").attr('data-status') == 'closed'){
        // console.log("hihi");
      }
    })
  }

  var getFilteredRecipesCount = function(params){
    $http.post('/recipes/search_count', params).success(function(data, status){
      $scope.totalRecipeItems = data.count;
      UserServices[$scope.pageLocation].totalItems = data.count;
    })
  };

  $scope.pageChanged = function() {
    UserServices[$scope.pageLocation].search_parameters = $scope.search_parameters;
    UserServices[$scope.pageLocation].search_parameters.page = $scope.search_parameters.page;
    UserServices[$scope.pageLocation].activateSearch = true;
    getFilteredRecipes(UserServices[$scope.pageLocation].search_parameters);
  };

  $scope.submitParams = function(){
    UserServices[$scope.pageLocation].search_parameters = $scope.search_parameters;
    UserServices[$scope.pageLocation].search_parameters.page = 1;
    UserServices[$scope.pageLocation].activateSearch = true;
    getFilteredRecipesCount(UserServices[$scope.pageLocation].search_parameters);
    getFilteredRecipes(UserServices[$scope.pageLocation].search_parameters);
  }

  $scope.memorySearch = function(){
    $scope.search_parameters = UserServices[$scope.pageLocation].search_parameters;
    $scope.search_parameters.page = UserServices[$scope.pageLocation].search_parameters.page;
    $scope.recipes = UserServices[$scope.pageLocation].recipes;
    $scope.totalRecipeItems = UserServices[$scope.pageLocation].totalItems;
    $scope.search_parameters.page = UserServices[$scope.pageLocation].search_parameters.page;
  }

  $scope.freshSearch = function(){
    $scope.memorySearch();
    getFilteredRecipesCount(UserServices[$scope.pageLocation].search_parameters);
    getFilteredRecipes(UserServices[$scope.pageLocation].search_parameters);
  }

  if ($location.path() == "/search") {
    $scope.pageLocation = "main";
    $scope.oppositePageLocation = "sub"
    $scope.hidden = false;
    $scope.search_parameters.user = false;
    $scope.htmlTitle = "Recipe Search"
    UserServices.fromPage = $location.path();
  } else {
    $scope.pageLocation = "sub";
    $scope.oppositePageLocation = "main"
    $scope.hidden = true;
    $scope.search_parameters.user = true;
    $scope.htmlTitle = "My Recipes"
    UserServices.fromPage = $location.path();
  }

  if (UserServices[$scope.pageLocation].activateSearch){
    if (UserServices[$scope.pageLocation].freshSearch){
      $scope.freshSearch();
      UserServices[$scope.pageLocation].freshSearch = false;
    } else {
      $scope.memorySearch();
    }
  } else {
    $scope.submitParams();
  }

  // toggle hidden checkboxes
  var collapseAll = function() {
    $scope.cuisineCollapsed = true;
    $scope.courseCollapsed = true;
    $scope.occasionCollapsed = true;
  }
  collapseAll();

  // add to collection button
  $scope.addCollection = function(recipeID) {
    console.log(recipeID);
    // $scope.liked = !$scope.liked;
    

    $http.post('/bookmarks/'+recipeID).success(function(data, status){
      console.log('hihi');
      UserServices[$scope.oppositePageLocation].activateSearch = false;
    });
  };

  // remove from collection button
  $scope.removeCollection = function(recipeID) {
    console.log(recipeID);
    // $scope.liked = !$scope.liked;
    $http.delete('/bookmarks/'+recipeID).success(function(data, status){
      console.log('hihi');
      UserServices[$scope.oppositePageLocation].activateSearch = false;
    });
  };

  // reset finder button
  $scope.resetFinder = function() {
    $('.checkbox').prop('checked',false);
    $scope.search_parameters.categories = [];
    $scope.search_parameters.keywords = [];
    $scope.search_parameters.ingredients = [];
    $scope.search_parameters.timeframe = [0,1440];
    $(".ui-slider-range.ui-widget-header.ui-corner-all").attr("style","left: 0%;width: 100%;");
    $($(".ui-slider-handle.ui-state-default.ui-corner-all")[0]).attr("style","left: 0%;");
    $($(".ui-slider-handle.ui-state-default.ui-corner-all")[1]).attr("style","left: 100%;");
    $("#amount").val(timeConversion(0) + " to " + timeConversion(1440) );
    collapseAll();
    $scope.submitParams();
  }

  // keyword search
  var checkDuplicates = function(keyword,array) {
    for (var i = 0; i < array.length; i++) {
      if (keyword == array[i]) {
        return true;
      }
    }
  };

  $scope.searchWord = "Ingredient";

  $scope.addKeyword = function() {
    if ($scope.newKeyword != undefined && $scope.newKeyword != "" && $scope.newKeyword.length > 2){
      if ($scope.searchWord == "Ingredient"){
        if (checkDuplicates($scope.newKeyword,$scope.search_parameters.ingredients)){
          $scope.newKeyword = '';
        } else {
          $scope.search_parameters.ingredients.push($scope.newKeyword);
          $scope.submitParams();
          $scope.newKeyword = '';
        }
      } else if ($scope.searchWord == "Keyword"){
        if (checkDuplicates($scope.newKeyword, $scope.search_parameters.keywords)){
          $scope.newKeyword = '';
        } else {
          $scope.search_parameters.keywords.push($scope.newKeyword);
          $scope.submitParams();
          $scope.newKeyword = '';
        }
      }
    } else {
      $scope.newKeyword = '';
      // needs notification of empty string
    }
  }
  $scope.removeKeyword = function(index) {
    $scope.search_parameters.keywords.splice(index,1);
    $scope.submitParams();
  }
  $scope.removeIngredient = function(index) {
    $scope.search_parameters.ingredients.splice(index,1);
    $scope.submitParams();
  }

  // toggle selection for a given food by name
  $scope.toggleCategory = function (category) {
    var idx = $scope.search_parameters.categories.indexOf(category);
    // is currently selected
    if (idx > -1) {
      $scope.search_parameters.categories.splice(idx, 1);
    } else {
      $scope.search_parameters.categories.push(category);
    }
    $scope.submitParams();
  };

  // time slider function
  $scope.search_parameters.timeframe = [0,1440];

  var timeConversion = function(minutes) {
    if (minutes > 60) {
      return Math.floor(minutes / 60) + "hr " + minutes % 60 + "min";
    } else {
      return minutes + "min";
    }
  }
  
  var timer;

  $(function() {
    $( "#slider-range" ).slider({
      range: true,
      min: 0,
      max: 1440,
      values: [ 0, 1440 ],
      slide: function(event,ui) {

        $("#amount").val(timeConversion(ui.values[0]) + " to " + timeConversion(ui.values[1]));
        $scope.search_parameters.timeframe = ui.values;

        $timeout.cancel(timer);
        timer = $timeout(function(){
          $scope.submitParams();
        }, 1000);
      }
    });
    // initial slider values
    // $( "#amount" ).val( $( "#slider-range" ).slider( "values", 0 ) + " - " + $( "#slider-range" ).slider( "values", 1 ) +" mins" );
    $("#amount").val(timeConversion(0) + " to " + timeConversion(1440) );
  });
}]);
